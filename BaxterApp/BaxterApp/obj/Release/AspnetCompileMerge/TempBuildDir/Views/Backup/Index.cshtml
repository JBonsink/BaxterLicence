@using Baxter.Models.Baxter
@using Baxter.Utilities
@using Baxter.Constants

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_JTable_Normal.cshtml";
}

<h2>@Resources.Global.General_Backups</h2>

<div>
    <ul id="tabs" class="nav nav-tabs" role="tablist">
        <li class="active"><a href="#backup-settings">@Resources.Global.General_Settings</a></li>
        <li><a href="#backups">@Resources.Global.General_Backups</a></li>
    </ul>
    <div class="tab-content">
        <div id="backup-settings" class="tab-pane fade in active">
            <form id="settings-form">
                <div class="row">
                    <div class="col-lg-3 col-md-3"><h3>@Resources.Global.Backup_Days</h3></div>
                    <div class="col-lg-3 col-md-3"><h3>@Resources.Global.Settings_General</h3></div>
                    <div class="col-lg-3 col-md-3"><h3>@Resources.Global.Settings_Network</h3></div>
                    <div class="col-lg-3 col-md-3"><h3>@Resources.Global.Disk_CurrentUsage</h3></div>
                </div>
                <div class="row">
                    <div class="col-lg-3 col-md-3">
                        <div class="checkbox"><label for="monday"><input type="checkbox" checked="checked" id="monday" name="Monday" />@Resources.Global.Day_Monday</label></div>
                        <div class="checkbox"><label for="tuesday"><input type="checkbox" checked="checked" id="tuesday" name="Tuesday" />@Resources.Global.Day_Tuesday</label></div>
                        <div class="checkbox"><label for="wednesday"><input type="checkbox" checked="checked" id="wednesday" name="Wednesday" />@Resources.Global.Day_Wednesday</label></div>
                        <div class="checkbox"><label for="thursday"><input type="checkbox" checked="checked" id="thursday" name=" Thursday" />@Resources.Global.Day_Thursday</label></div>
                        <div class="checkbox"><label for="friday"><input type="checkbox" checked="checked" id="friday" name="Friday" />@Resources.Global.Day_Friday</label></div>
                        <div class="checkbox"><label for="saturday"><input type="checkbox" checked="checked" id="saturday" name="Saturday" />@Resources.Global.Day_Saturday</label></div>
                        <div class="checkbox"><label for="sunday"><input type="checkbox" checked="checked" id="sunday" name="Sunday" />@Resources.Global.Day_Sunday</label></div>
                    </div>
                    <div class="col-lg-3 col-md-3">
                        <div class="form-group">
                            <label for="minFreeSpaceGB">@Resources.Global.Backup_MinFreeSpace</label>
                            <div class="input-group">
                                <input id="minFreeSpaceGB" name="MinFreeSpaceGB" type="number" class="validate[required, custom[integer], min[0], max[256]] form-control" autocomplete="off">
                                <span class="input-group-addon">GB</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="backupTTLWeeks">@Resources.Global.Backup_TTL</label>
                            <div class="input-group">
                                <input id="backupTTLWeeks" name="BackupTTLWeeks" type="number" class="validate[required, custom[integer], min[1], max[260]] form-control" autocomplete="off">
                                <span class="input-group-addon">@Resources.Global.General_Weeks</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="time">@Resources.Global.General_Time</label>
                            <select class="form-control validate[required]" id="time" name="Time">
                                <option value="00:00">00:00</option>
                                <option value="00:30">00:30</option>
                                <option value="01:00">01:00</option>
                                <option value="01:30">01:30</option>
                                <option value="02:00">02:00</option>
                                <option value="02:30">02:30</option>
                                <option value="03:00">03:00</option>
                                <option value="03:30">03:30</option>
                                <option value="04:00">04:00</option>
                                <option value="04:30">04:30</option>
                                <option value="05:00">05:00</option>
                                <option value="05:30">05:30</option>
                                <option value="06:00">06:00</option>
                                <option value="06:30">06:30</option>
                                <option value="07:00">07:00</option>
                                <option value="07:30">07:30</option>
                                <option value="08:00">08:00</option>
                                <option value="08:30">08:30</option>
                                <option value="09:00">09:00</option>
                                <option value="09:30">09:30</option>
                                <option value="10:00">10:00</option>
                                <option value="10:30">10:30</option>
                                <option value="11:00">11:00</option>
                                <option value="11:30">11:30</option>
                                <option value="12:00">12:00</option>
                                <option value="12:30">12:30</option>
                                <option value="13:00">13:00</option>
                                <option value="13:30">13:30</option>
                                <option value="14:00">14:00</option>
                                <option value="14:30">14:30</option>
                                <option value="15:00">15:00</option>
                                <option value="16:30">16:30</option>
                                <option value="17:00">17:00</option>
                                <option value="17:30">17:30</option>
                                <option value="18:00">18:00</option>
                                <option value="18:30">18:30</option>
                                <option value="18:00">18:00</option>
                                <option value="18:30">18:30</option>
                                <option value="19:00">19:00</option>
                                <option value="19:30">19:30</option>
                                <option value="20:00">20:00</option>
                                <option value="20:30">20:30</option>
                                <option value="21:00">21:00</option>
                                <option value="21:30">21:30</option>
                                <option value="22:00">22:00</option>
                                <option value="22:30">22:30</option>
                                <option value="23:00">23:00</option>
                                <option value="23:30">23:30</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>@Resources.Global.Backup_Path</label>
                            <input class="form-control validate[required]" id="location" name="BackupPath" type="text" autocomplete="off">
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-3">
                        <div class="form-group">
                            <label>@Resources.Global.Backup_NetworkShare</label>
                            <input class="form-control" id="networkShare" name="NetworkShare" type="text" autocomplete="off">
                        </div>
                        <div class="form-group">
                            <label>@Resources.Global.Backup_NetworkUsername</label>
                            <input class="form-control" id="networkUsername" name="NetworkUsername" type="text" autocomplete="off">
                        </div>
                        <div class="form-group">
                            <label>@Resources.Global.Backup_NetworkPassword</label>
                            <input class="form-control" id="networkPassword" name="NetworkPassword" type="password" autocomplete="off">
                        </div>
                        <button id="test-button" class="btn btn-primary" onclick="testNetworkSettings()"><i class="glyphicon glyphicon-dashboard"></i> @Resources.Global.Backup_TestSettings</button>
                    </div>
                    <div id="drive-info" class="col-lg-3 col-md-3">
                        <div id="free-space-info" class="alert"></div>
                        <canvas id="chart"></canvas>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-3 col-md-3">
                        <button id="save-button" class="btn btn-primary" onclick="saveSettings()"><i class="glyphicon glyphicon-send"></i> @Resources.Global.General_Save</button>
                    </div>
                </div>
            </form>
        </div>
        <div id="backups" class="tab-pane fade">
            <div id="backup-table" class="jtable"></div>
        </div>
    </div>
</div>

<script>
    Resources.AddGlobalResources([
        { name: 'Disk_SufficientSpace', value: '@Resources.Global.Disk_SufficientSpace' },
        { name: 'Disk_InsufficientSpace', value: '@Resources.Global.Disk_InsufficientSpace' }
    ]);

    var hasEditPermission = @Access.HasPermission(FunctionName.Maintenance, Permission.Edit).ToString().ToLower();

    $('#settings-form').validationEngine('attach', {
        focusFirstField: false,
        promptPosition: "topRight:-100,10",
        binded: false,
        scroll: false
    });

    function toggleSpin(button, originalGlyphicon) {
        button.find('i').toggleClass(originalGlyphicon + ' glyphicon-asterisk icon-spin');
    }

    function serializeBackupSettings() {
        var container = $('#backup-settings');
        var checkboxes = container.find('input[type="checkbox"]');
        var otherInputs = container.find('input[type!="checkbox"], select');
        var payload = { ID: 1, BackupSchedule: 0 };

        $.each(checkboxes, function (i, checkbox) {
            payload.BackupSchedule += parseInt(($(checkbox).prop('checked')) ? $(checkbox).val() : 0, 10);
        });

        $.each(otherInputs, function (i, input) {
            payload[$(input).attr('name')] = $(input).val();
        });

        return payload;
    }

    function testNetworkSettings() {
        var button = $("#test-button");
        var payload = serializeBackupSettings();

        disableButton(button); toggleSpin(button, 'glyphicon-dashboard');

        submitData('@Url.Action("TestNetworkSettings", "BackupSettings")', payload, function (response) {
            toggleSpin(button, 'glyphicon-dashboard');  enableButton(button);

            if (response.Result == 'OK') successDialog('@Resources.Global.Backup_TestSuccess');
        });
    }

    function saveSettings() {
        var button = $('#save-button');
        var payload = serializeBackupSettings();

        if (!$('#settings-form').validationEngine('validate')) return;

        toggleSpin(button, 'glyphicon-send'); disableButton(button);

        submitData('@Url.Action("Edit", "BackupSettings")', payload, function (response) {
            toggleSpin(button, 'glyphicon-send'); enableButton(button);

            if (response.Result == 'OK') successDialog('@Resources.Global.General_ChangesSuccessfullySaved');
        });
    }

    $(function () {
        var backupTable = $("#backup-table");

        $('#tabs a').click(function (e) {
            e.preventDefault()
            $(this).tab('show')
        })

        if (!hasEditPermission)
        {
            $('input, select, #save-button').attr('disabled', true);
        }

        downloadObjects(
            "@Url.Action("GetActions", "Backup")",
            "@Url.Action("GetFields", "Backup")").done(function (actions, fields) {

                var options = $.extend(GetDefaultOptions(actions), {
                    title: "@Resources.Global.General_Backups",
                    defaultSorting: "ID DESC",
                    fields: fields,
                });

                var toolbar = {
                    items: [
                         {
                             icon: 'glyphicon glyphicon-export',
                             text: "@Resources.Global.Backup_Now",
                             click: function (table) {
                                 submitData('@Url.Action("BackupNow", "Backup")', {}, function () { table.reload(); });
                             }
                         },
                    ]
                };

                if (hasEditPermission) options.toolbar = toolbar;

                backupTable.jtable(options)
                           .jtable('load');
            }
        );

        downloadObjectAsync("@Url.Action("List", "BackupSettings")", { jtStartIndex: 0, jtPageSize: 20 }).done(function (response) {
            var backupSettings = response.Records[0];
            var schedule = backupSettings.BackupSchedule;

            function dayInSchedule(day) {
                return ((day & schedule) > 0);
            }

            $('#monday').prop('checked', dayInSchedule(@((int)DaysOfWeek.Monday))).val(@((int)DaysOfWeek.Monday));
            $('#tuesday').prop('checked', dayInSchedule(@((int)DaysOfWeek.Tuesday))).val(@((int)DaysOfWeek.Tuesday));
            $('#wednesday').prop('checked', dayInSchedule(@((int)DaysOfWeek.Wednesday))).val(@((int)DaysOfWeek.Wednesday));
            $('#thursday').prop('checked', dayInSchedule(@((int)DaysOfWeek.Thursday))).val(@((int)DaysOfWeek.Thursday));
            $('#friday').prop('checked', dayInSchedule(@((int)DaysOfWeek.Friday))).val(@((int)DaysOfWeek.Friday));
            $('#saturday').prop('checked', dayInSchedule(@((int)DaysOfWeek.Saturday))).val(@((int)DaysOfWeek.Saturday));
            $('#sunday').prop('checked', dayInSchedule(@((int)DaysOfWeek.Sunday))).val(@((int)DaysOfWeek.Sunday));

            $('#backupTTLWeeks').val(backupSettings.BackupTTLWeeks);
            $('#minFreeSpaceGB').val(backupSettings.MinFreeSpaceGB);
            $('#time').val(backupSettings.Time);
            $('#location').val(backupSettings.BackupPath);
            $('#networkShare').val(backupSettings.NetworkShare);
            $('#networkUsername').val(backupSettings.NetworkUsername);
            $('#networkPassword').val(backupSettings.NetworkPassword);

            loadingScreen.close();

            downloadObjectAsync("@Url.Action("GetDriveInfo", "Drive")", { path: backupSettings.NetworkShare }).done(
                function (response) {
                    if (response.Result == 'OK') {
                        var drive = response.Record;
                        var driveInfo = $('#drive-info');
                        var freeSpaceInfo = $('#free-space-info');

                        if (drive.FreeSpace > backupSettings.MinFreeSpaceGB)
                        {
                            freeSpaceInfo.addClass('alert-success').text(String.format(Resources.Global.Disk_SufficientSpace, drive.FreeSpace));
                        }
                        else
                        {
                            freeSpaceInfo.addClass('alert-danger').text(String.format(Resources.Global.Disk_InsufficientSpace, drive.FreeSpace));
                        }

                        var doughnutData = [
                            {
                                value: drive.FreeSpace,
                                color: "#EEEEEE",
                                highlight: "#F1F1F1",
                                label: "@Resources.Global.Drive_FreeSpace"
                            },
                            {
                                value: (drive.TotalSpace - drive.FreeSpace),
                                color: "#26A0DA",
                                highlight: "#77D3FF",
                                label: "@Resources.Global.Drive_UsedSpace"
                            }
                        ];

                        var ctx = $('#chart')[0].getContext("2d");
                        var doughnut1 = new Chart(ctx).Doughnut(doughnutData, { responsive: true, scaleLabel: "<%=value%>GB" });
                    }
                }
            );
        });
    });
</script>